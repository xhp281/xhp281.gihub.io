{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":0},{"_id":"source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"06c752ec38de449ce7218f4aefac92fbdd8429d6","modified":1637675944271},{"_id":"source/_posts/objc_block_01.md","hash":"f7ce59e8286ea470753d56bd6d7c0352871fc053","modified":1638612796646},{"_id":"source/categories/index.md","hash":"8317b26eb8a30505a430b14cc84d8c706263c2b5","modified":1637675944271},{"_id":"source/images/favicon-16x16-next.png","hash":"aacb4e09f5a77758b2f9ff3e5de9cbbe434818e2","modified":1637675944271},{"_id":"source/images/favicon-32x32-next.png","hash":"10e317fe1b15c7f8b9b82d7d75c10838a5183cad","modified":1637675944271},{"_id":"source/tags/index.md","hash":"788e2efc923ef542faa0878a4681ed43766ffd36","modified":1637675944271},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"0689d3281f35901334994480668a066d9b7b3fae","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"a9babdef991b0e7645f420c5a6b8e1a61b5d70d8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/package.json","hash":"f294566c22fec5f9404e560326a2ba18dca8591e","modified":1637666269401},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"0af64049db8188d5f8cc226b353e0d7909819feb","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"9167e429a459686c9fc140790124a46d677e6b15","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"d3c094aaef1431fbc9df333529a7b1789ccd134c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"471dcbe22d0dbe043dcf25a1a1c17ca76aa9a548","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"5c01e380ba843f8016d8fa4593432430f5bd3584","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"b0ced2583fdd505da3ef27a9db9c55cc7b936732","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"08dac57e15c9f06c7cf54884b045f2362595f9d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c6b3c031d23b2a093e025c75b7cab6bc0379c6ea","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"2e58cb90a77d3dd16e02b8949808b4b16453828c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"0b3e2696eca39781c3524b2c5a2555ebc616e6e8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"9b34143aec49e390e18f380026a45096f7477722","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"b1bcc5f9357a9f8b8d6f8f285f073aaf3157f9db","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"c8e95e8ac4cbdba01cb93e9e0569b45603e41bc6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":499162500000},{"_id":"public/categories/index.html","hash":"26fe4022af444ebc570621fc3b9456d72cdf49a2","modified":1637684612500},{"_id":"public/tags/index.html","hash":"f7bc1603d3dfd579ad4371a9cd9b5fd48e202a14","modified":1637684612500},{"_id":"public/archives/index.html","hash":"ea6c3449c3600bdf536c4500371f98125a9f5236","modified":1637684612500},{"_id":"public/archives/2021/index.html","hash":"5b1bfe4b5f39b3bb63ab856152df14a447f10b0b","modified":1637684612500},{"_id":"public/archives/2021/11/index.html","hash":"e4e50e307b89edf61c1acc549cb52aeec623981e","modified":1637684612500},{"_id":"public/categories/objc/index.html","hash":"f708ffbcc1b135caf3a19ed0d1c88aaf925c2467","modified":1637684612500},{"_id":"public/tags/Block/index.html","hash":"d3ccea14980729d0c0948d04ed3ffc6a4d074a37","modified":1637684612500},{"_id":"public/2021/11/23/objc_block_01/index.html","hash":"01f2a63863dc1ded79cd882061608b339c57042f","modified":1637684612500},{"_id":"public/index.html","hash":"f311408821db83029d3970bbac4454438dd69c90","modified":1637684612500},{"_id":"public/CNAME","hash":"06c752ec38de449ce7218f4aefac92fbdd8429d6","modified":1637684612500},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637684612500},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637684612500},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637684612500},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1637684612500},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1637684612500},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1637684612500},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1637684612500},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1637684612500},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1637684612500},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1637684612500},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1637684612500},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1637684612500},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1637684612500},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1637684612500},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1637684612500},{"_id":"public/css/main.css","hash":"fde0b0bbe51551022f631770566e04f8c6b34b1e","modified":1637684612500}],"Category":[{"name":"objc","_id":"ckwcb4us200037cusa8o8fef1"}],"Data":[],"Page":[{"title":"categories","date":"2021-09-03T07:31:49.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-09-03 15:31:49\ntype: categories\n---\n","updated":"2021-11-23T13:59:04.271Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckwcb4urv00007cus2aatebyh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2014-12-22T04:39:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2014-12-22 12:39:04\ntype: tags\n---\n","updated":"2021-11-23T13:59:04.271Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckwcb4us000027cusd8snbbxm","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Block本质","date":"2021-11-23T06:50:18.000Z","_content":"## Block本质\n> 1、Block本质是一个对象，内部有一个isa指针\n> 2、封装了函数调用以及函数调用环境的OC对象\n\n### 探索本质\n```objc\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n         int age = 10; // 默认是 auto 类型变量\n         void(^block)(int, int) = ^(int a, int b){\n             NSLog(@\"this is block a = %d, b = %d\", a, b);\n             NSLog(@\"this is block, age = %d\",age);\n         };\n         block(2,1);\n    }\n    return 0;\n}\n```\n\n将示例代码转换为C++查看内部结构，与OC代码进行比较，转换代码如下:\n`xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m`\n\n编译之后的代码如下\n```objc\nint main(int argc, const char * argv[]) {\n    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n         int age = 10;\n         void(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age));\n\n         ((void (*)(__block_impl *, int, int))((__block_impl *)block)->FuncPtr)((__block_impl *)block, 2, 1);\n    }\n    return 0;\n}\n```\n\n#### 定义block变量\n```c++\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age));\n```\n上述代码中，可以发现block的定义调用了 `__main_block_impl_0` 函数，并将 `__main_block_impl_0` 的地址赋值给了block。下面我们分析下 `__main_block_impl_0` 的内部结构。\n\n##### __main_block_impl_0 结构体\n```c++\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _age, int flags=0) : age(_age) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n```\n\n在 `__main_block_impl_0` 结构体内部有一个同名构造函数 `__main_block_impl_0`，构造函数对变量进行了赋值，最终返回一个结构体。\n构造函数中对一些变量进行了赋值（或者其他操作）最终会返回一个结构体。\n`__main_block_impl_0` 内部的构造函数传入了四个参数，`(void *)__main_block_func_0`、`&__main_block_desc_0_DATA`、`age`、`flags`。其中 `flags` 有默认参数，在函数调用的时候可以省略不传。最后的 `age(_age)` 表示传入的 `_age` 会自动赋值给结构体内部的 `age` 成员，相当于 `age = _age`。\n\n接下来分析一下前面三个参数的具体内容\n\n##### (void *)__main_block_func_0\n```c++\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself, int a, int b) {\n  int age = __cself->age; // bound by copy\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_0, a, b);\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_1,age);\n}\n```\n\n在 `__main_block_func_0` 函数中首先取出block中 `age` 的值，然后是两个NSLog的打印信息。在 `__main_block_func_0` 内部存储了block引用的外部的变量的值。而 `__main_block_impl_0` 函数中传入的第二个参数是 `(void *)__main_block_func_0`,也就是说block块内部的代码封装成了 `__main_block_func_0` 函数，并将 `__main_block_func_0` 函数的地址传入了 `__main_block_impl_0` 的构造函数中保存在了结构体内。\n\n##### &__main_block_desc_0_DATA\n```c++\nstatic struct __main_block_desc_0 {\n  size_t reserved;\n  size_t Block_size;\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n```\n\n在 `__main_block_desc_0_DATA` 内部存储了两个参数，`reserved` 和 `Block_size`, `reserved` 直接赋值为0，`Block_size` 存储的是 `__main_block_impl_0` 所占用空间大小。最终将 `__main_block_desc_0` 结构体的地址传入 `__main_block_impl_0` 并赋值给 `Desc`\n\n##### age\n`age` 是我们定义的局部变量，因为在block内部使用到了局部变量，所以block声明的时候，这里会将 `age` 作为参数传入，也就是说block会捕获 `age`，如果没有在block中使用 `age` ，这里将只会传入 `(void *)__main_block_func_0` 和 `&__main_block_desc_0_DATA` 这两个参数，如果有多个参数，那么传入的时候就会变成多个\n\n```c++\n// 没有捕获的情况\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA));\n// 捕获多个变量\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age, name, numer));\n```\n\n#### 再次查看 __main_block_impl_0 \n```c++\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _age, int flags=0) : age(_age) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;  // block内部代码块地址\n    Desc = desc;        // block描述信息(占用内存大小)\n  }\n};\n```\n`__main_block_impl_0` 的第一个变量就是 `__block_impl` 结构体，内部代码如下：\n```c++\nstruct __block_impl {\n  void *isa;\n  int Flags;\n  int Reserved;\n  void *FuncPtr;\n};\n```\n\n`__block_impl` 内部有一个 `isa` 指针。因此可以证明block本质上就是一个OC对象。而在构造函数中将函数传入的值分别存储在 `__main_block_impl_0` 结构体实例中，最终将结构体的地址赋值给block。\n\n通过上面对 `__main_block_impl_0` 结构体构造函数三个参数的问题，可以得出结论：\n1.`__block_impl`结构体中 `isa` 指针存储着 `&_NSConcreteStackBlock` 地址，可以暂时理解为其类对象地址，block 就是 `_NSConcreteStackBlock` 类型的。\n2.block代码块中的代码呗封装成 `__main_block_func_0` 函数，`FuncPtr` 存储着 `__main_block_func_0` 函数的地址。\n3.`Desc` 指向 `__main_block_desc_0`结构体对象，其中存储 `__main_block_impl_0` 结构体所占用的内存大小。\n\n#### 调用block执行内部代码\n```c++\n// 执行block代码\n((void (*)(__block_impl *, int, int))((__block_impl *)block)->FuncPtr)((__block_impl *)block, 2, 1);\n```\n通过上述代码可以发现，block 调用是通过 `block` 找到 `FuncPtr` 直接调用，通上面分析可以明确 block 执行的是 __main_block_impl_0 类型的结构体，但是在 `__main_block_impl_0` 内部并不能直接找到 `FuncPtr`，`FuncPtr` 是存在 `__block_impl` 中的。\n\n\n\n`block` 可以直接调用 `__block_impl` 中的 `FuncPtr`原因，通过查看上述源码可以发现，`(__block_impl *)` 将 block 强制转换为了 `__block_impl` 类型，因为 `__block_impl` 是 `__main_block_impl_0` 结构体的第一个成员，相当于将 `__block_impl` 结构体的成员拿出来直接放在 `__main_block_impl_0` 中，也就说明 `__block_impl` 的内存地址就是 `__main_block_impl_0` 结构体内存地址的开头。所以可以转换成功，并找到 `FuncPtr` 成员。\n\n\n\n通过上述可以知道，`FuncPtr` 存储着代码块的函数地址，调用此函数就会执行代码块中的代码，回头查看 `__main_block_func_0` ，可以发现第一个参数就是 `__main_block_impl_0` 类型的指针。也就是说将 `block` 传入 `__main_block_func_0` 函数中，便于从中捕获 `block` 的值。\n\n\n\n#### 验证block的本质确实是 __main_block_impl_0 结构体类型\n\n通过代码证明一下上述内容：通用使用之前的方法，我们按照上面分析block内部结构自定义结构体，并将block内部的结构体强制转换为自定义的结构体，转换成功说明底层结构体确实如之前分析的一样。\n\n```objc\nstruct __block_impl {\n  void *isa;\n  int Flags;\n  int Reserved;\n  void *FuncPtr;\n};\n\nstruct __main_block_desc_0 {\n  size_t reserved;\n  size_t Block_size;\n};\n\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n};\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n         int age = 10; // 默认是 auto 类型变量\n         void(^block)(int, int) = ^(int a, int b){\n             NSLog(@\"this is block a = %d, b = %d\", a, b);\n             NSLog(@\"this is block, age = %d\",age);\n         };\n        // 进行类型转换\n        struct __main_block_impl_0 *blockStruct = (__bridge struct __main_block_impl_0 *)block;\n         block(2,1);\n    }\n    return 0;\n}\n```\n\n通过xcode断点可以看出自定义结构体可以被成功赋值。\n\n ![block_自定义构体验证](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81.jpeg)\n\n接下来断点来到block代码块中，看下对战信息中心的函数调用地址。`Debug -> Debug workflow -> always show Disassembly` 。\n\n ![block_自定义构体验证_汇编](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81_%E6%B1%87%E7%BC%96.jpeg)\n\n通过上图可以看到 `block` 的地址确实和 `FuncPtr` 的地址是一样的。\n\n### 总结\n\n通过上述分析已经对block底层有了一个基本认识，将上述代码转换为一张图片看下具体的关系。\n\n![](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E7%BB%93%E6%9E%84%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BE.png)\n\nblock的底层数据可以通过一张图来展示\n\n![block_底层数据结构](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png)\n\n## block变量的捕获\n\n为了保证block内部能正常访问外部的变量，block有一个变量捕获机制。\n\n### 局部变量\n\n#### auto变量\n\n上述代码中已经了解过block对age变量的捕获。auto自动变量，离开作用域就销毁，通常局部变量前面自动添加 `auto` 关键字。自动变量会捕获到block内部，也就是说block会专门新增一个参数来存储变量的值。`auto` 只存在于局部变量中，访问方式为值传递，通过上述对age参数额解释，我们也可以确定确实是值传递。\n\n#### static变量\n\nstatic修饰的变量为指针传递，同样会被block捕获。\n\n接下来分别添加auto修饰的局部变量和static修饰的局部变量，通过源码查看下他们的区别。\n\n```objc\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        auto int a = 66;\n        static int b = 99;\n        void(^block)(void) = ^{\n            NSLog(@\"this is block a = %d, b = %d\", a, b);\n        };\n        a = 88;\n        b = 77;\n        block();\n    }\n    return 0;\n}\n// log：this is block a = 66, b = 77\n// block中a的值并没有被改变，b的值被改变了\n```\n\n将源码转换成c++代码之后的两个参数的区别如下图：\n\n![](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E4%B8%8D%E5%90%8C%E5%8F%98%E9%87%8F%E6%8D%95%E8%8E%B7%E7%9A%84%E5%8C%BA%E5%88%AB.jpeg)\n\n从上述源码中可以看出，a，b两个变量都有捕获到block内部。但是a传入的是值，b传入的是地址。\n\n这两种变量产生差异的原因是，自动变量可能会销毁，block执行的时候自动变量有可能已经被销毁了，那么此时再去访问被销毁的地址肯定会发生坏的内存访问，因此对于自动变量一定是值传递而不是指针传递。而静态变量不会被销毁，所以完全可以传递地址。因为传递的是值的地址，所以block调用之前修改地址中保存的值，block中的地址是不会变的，所以值会随之改变。\n\n### 全局变量\n\n示例代码：\n\n```objc\nint a = 66;\nstatic int b = 99;\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        void(^block)(void) = ^{\n            NSLog(@\"this is block a = %d, b = %d\", a, b);\n        };\n        a = 88;\n        b = 77;\n        block();\n    }\n    return 0;\n}\n// log：this is block a = 88, b = 77\n```\n\n生成的c++代码看下全局调用方式，可以发现结构体中没有a，b的成员变量，传递的时候是直接调用。\n\n![block_全局变量_c++源码](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F_c%2B%2B%E6%BA%90%E7%A0%81.jpg)\n\n通过上述代码可以发现，`__main_block_impl_0` 没有添加任何变量，因此block不需要捕获全局变量，因为全局变量在哪都可以访问。\n\n**局部变量因为跨函数访问所以需要捕获，全局变量哪里都可以访问，因此不需要捕获。**\n\n|      变量类型      | 捕获到block内部 | 访问方式 |\n| :----------------: | :-------------: | :------: |\n|  局部变量（auto）  |        ✅        |  值传递  |\n| 局部变量（static） |        ✅        | 指针传递 |\n|      全局变量      |        ❌        | 直接访问 |\n\n**总结：局部变量都会被block捕获，自动变量是值捕获，静态变量是地址捕获，全局变量则不会被捕获。**\n","source":"_posts/objc_block_01.md","raw":"\n\n\n\ntitle: Block本质\ncategories:\n\n  - objc\ntags:\n  - Block\ndate: 2021-11-23 14:50:18\n---\n## Block本质\n> 1、Block本质是一个对象，内部有一个isa指针\n> 2、封装了函数调用以及函数调用环境的OC对象\n\n### 探索本质\n```objc\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n         int age = 10; // 默认是 auto 类型变量\n         void(^block)(int, int) = ^(int a, int b){\n             NSLog(@\"this is block a = %d, b = %d\", a, b);\n             NSLog(@\"this is block, age = %d\",age);\n         };\n         block(2,1);\n    }\n    return 0;\n}\n```\n\n将示例代码转换为C++查看内部结构，与OC代码进行比较，转换代码如下:\n`xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m`\n\n编译之后的代码如下\n```objc\nint main(int argc, const char * argv[]) {\n    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n         int age = 10;\n         void(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age));\n\n         ((void (*)(__block_impl *, int, int))((__block_impl *)block)->FuncPtr)((__block_impl *)block, 2, 1);\n    }\n    return 0;\n}\n```\n\n#### 定义block变量\n```c++\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age));\n```\n上述代码中，可以发现block的定义调用了 `__main_block_impl_0` 函数，并将 `__main_block_impl_0` 的地址赋值给了block。下面我们分析下 `__main_block_impl_0` 的内部结构。\n\n##### __main_block_impl_0 结构体\n```c++\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _age, int flags=0) : age(_age) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n```\n\n在 `__main_block_impl_0` 结构体内部有一个同名构造函数 `__main_block_impl_0`，构造函数对变量进行了赋值，最终返回一个结构体。\n构造函数中对一些变量进行了赋值（或者其他操作）最终会返回一个结构体。\n`__main_block_impl_0` 内部的构造函数传入了四个参数，`(void *)__main_block_func_0`、`&__main_block_desc_0_DATA`、`age`、`flags`。其中 `flags` 有默认参数，在函数调用的时候可以省略不传。最后的 `age(_age)` 表示传入的 `_age` 会自动赋值给结构体内部的 `age` 成员，相当于 `age = _age`。\n\n接下来分析一下前面三个参数的具体内容\n\n##### (void *)__main_block_func_0\n```c++\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself, int a, int b) {\n  int age = __cself->age; // bound by copy\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_0, a, b);\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_1,age);\n}\n```\n\n在 `__main_block_func_0` 函数中首先取出block中 `age` 的值，然后是两个NSLog的打印信息。在 `__main_block_func_0` 内部存储了block引用的外部的变量的值。而 `__main_block_impl_0` 函数中传入的第二个参数是 `(void *)__main_block_func_0`,也就是说block块内部的代码封装成了 `__main_block_func_0` 函数，并将 `__main_block_func_0` 函数的地址传入了 `__main_block_impl_0` 的构造函数中保存在了结构体内。\n\n##### &__main_block_desc_0_DATA\n```c++\nstatic struct __main_block_desc_0 {\n  size_t reserved;\n  size_t Block_size;\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n```\n\n在 `__main_block_desc_0_DATA` 内部存储了两个参数，`reserved` 和 `Block_size`, `reserved` 直接赋值为0，`Block_size` 存储的是 `__main_block_impl_0` 所占用空间大小。最终将 `__main_block_desc_0` 结构体的地址传入 `__main_block_impl_0` 并赋值给 `Desc`\n\n##### age\n`age` 是我们定义的局部变量，因为在block内部使用到了局部变量，所以block声明的时候，这里会将 `age` 作为参数传入，也就是说block会捕获 `age`，如果没有在block中使用 `age` ，这里将只会传入 `(void *)__main_block_func_0` 和 `&__main_block_desc_0_DATA` 这两个参数，如果有多个参数，那么传入的时候就会变成多个\n\n```c++\n// 没有捕获的情况\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA));\n// 捕获多个变量\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age, name, numer));\n```\n\n#### 再次查看 __main_block_impl_0 \n```c++\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _age, int flags=0) : age(_age) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;  // block内部代码块地址\n    Desc = desc;        // block描述信息(占用内存大小)\n  }\n};\n```\n`__main_block_impl_0` 的第一个变量就是 `__block_impl` 结构体，内部代码如下：\n```c++\nstruct __block_impl {\n  void *isa;\n  int Flags;\n  int Reserved;\n  void *FuncPtr;\n};\n```\n\n`__block_impl` 内部有一个 `isa` 指针。因此可以证明block本质上就是一个OC对象。而在构造函数中将函数传入的值分别存储在 `__main_block_impl_0` 结构体实例中，最终将结构体的地址赋值给block。\n\n通过上面对 `__main_block_impl_0` 结构体构造函数三个参数的问题，可以得出结论：\n1.`__block_impl`结构体中 `isa` 指针存储着 `&_NSConcreteStackBlock` 地址，可以暂时理解为其类对象地址，block 就是 `_NSConcreteStackBlock` 类型的。\n2.block代码块中的代码呗封装成 `__main_block_func_0` 函数，`FuncPtr` 存储着 `__main_block_func_0` 函数的地址。\n3.`Desc` 指向 `__main_block_desc_0`结构体对象，其中存储 `__main_block_impl_0` 结构体所占用的内存大小。\n\n#### 调用block执行内部代码\n```c++\n// 执行block代码\n((void (*)(__block_impl *, int, int))((__block_impl *)block)->FuncPtr)((__block_impl *)block, 2, 1);\n```\n通过上述代码可以发现，block 调用是通过 `block` 找到 `FuncPtr` 直接调用，通上面分析可以明确 block 执行的是 __main_block_impl_0 类型的结构体，但是在 `__main_block_impl_0` 内部并不能直接找到 `FuncPtr`，`FuncPtr` 是存在 `__block_impl` 中的。\n\n\n\n`block` 可以直接调用 `__block_impl` 中的 `FuncPtr`原因，通过查看上述源码可以发现，`(__block_impl *)` 将 block 强制转换为了 `__block_impl` 类型，因为 `__block_impl` 是 `__main_block_impl_0` 结构体的第一个成员，相当于将 `__block_impl` 结构体的成员拿出来直接放在 `__main_block_impl_0` 中，也就说明 `__block_impl` 的内存地址就是 `__main_block_impl_0` 结构体内存地址的开头。所以可以转换成功，并找到 `FuncPtr` 成员。\n\n\n\n通过上述可以知道，`FuncPtr` 存储着代码块的函数地址，调用此函数就会执行代码块中的代码，回头查看 `__main_block_func_0` ，可以发现第一个参数就是 `__main_block_impl_0` 类型的指针。也就是说将 `block` 传入 `__main_block_func_0` 函数中，便于从中捕获 `block` 的值。\n\n\n\n#### 验证block的本质确实是 __main_block_impl_0 结构体类型\n\n通过代码证明一下上述内容：通用使用之前的方法，我们按照上面分析block内部结构自定义结构体，并将block内部的结构体强制转换为自定义的结构体，转换成功说明底层结构体确实如之前分析的一样。\n\n```objc\nstruct __block_impl {\n  void *isa;\n  int Flags;\n  int Reserved;\n  void *FuncPtr;\n};\n\nstruct __main_block_desc_0 {\n  size_t reserved;\n  size_t Block_size;\n};\n\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n};\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n         int age = 10; // 默认是 auto 类型变量\n         void(^block)(int, int) = ^(int a, int b){\n             NSLog(@\"this is block a = %d, b = %d\", a, b);\n             NSLog(@\"this is block, age = %d\",age);\n         };\n        // 进行类型转换\n        struct __main_block_impl_0 *blockStruct = (__bridge struct __main_block_impl_0 *)block;\n         block(2,1);\n    }\n    return 0;\n}\n```\n\n通过xcode断点可以看出自定义结构体可以被成功赋值。\n\n ![block_自定义构体验证](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81.jpeg)\n\n接下来断点来到block代码块中，看下对战信息中心的函数调用地址。`Debug -> Debug workflow -> always show Disassembly` 。\n\n ![block_自定义构体验证_汇编](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81_%E6%B1%87%E7%BC%96.jpeg)\n\n通过上图可以看到 `block` 的地址确实和 `FuncPtr` 的地址是一样的。\n\n### 总结\n\n通过上述分析已经对block底层有了一个基本认识，将上述代码转换为一张图片看下具体的关系。\n\n![](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E7%BB%93%E6%9E%84%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BE.png)\n\nblock的底层数据可以通过一张图来展示\n\n![block_底层数据结构](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png)\n\n## block变量的捕获\n\n为了保证block内部能正常访问外部的变量，block有一个变量捕获机制。\n\n### 局部变量\n\n#### auto变量\n\n上述代码中已经了解过block对age变量的捕获。auto自动变量，离开作用域就销毁，通常局部变量前面自动添加 `auto` 关键字。自动变量会捕获到block内部，也就是说block会专门新增一个参数来存储变量的值。`auto` 只存在于局部变量中，访问方式为值传递，通过上述对age参数额解释，我们也可以确定确实是值传递。\n\n#### static变量\n\nstatic修饰的变量为指针传递，同样会被block捕获。\n\n接下来分别添加auto修饰的局部变量和static修饰的局部变量，通过源码查看下他们的区别。\n\n```objc\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        auto int a = 66;\n        static int b = 99;\n        void(^block)(void) = ^{\n            NSLog(@\"this is block a = %d, b = %d\", a, b);\n        };\n        a = 88;\n        b = 77;\n        block();\n    }\n    return 0;\n}\n// log：this is block a = 66, b = 77\n// block中a的值并没有被改变，b的值被改变了\n```\n\n将源码转换成c++代码之后的两个参数的区别如下图：\n\n![](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E4%B8%8D%E5%90%8C%E5%8F%98%E9%87%8F%E6%8D%95%E8%8E%B7%E7%9A%84%E5%8C%BA%E5%88%AB.jpeg)\n\n从上述源码中可以看出，a，b两个变量都有捕获到block内部。但是a传入的是值，b传入的是地址。\n\n这两种变量产生差异的原因是，自动变量可能会销毁，block执行的时候自动变量有可能已经被销毁了，那么此时再去访问被销毁的地址肯定会发生坏的内存访问，因此对于自动变量一定是值传递而不是指针传递。而静态变量不会被销毁，所以完全可以传递地址。因为传递的是值的地址，所以block调用之前修改地址中保存的值，block中的地址是不会变的，所以值会随之改变。\n\n### 全局变量\n\n示例代码：\n\n```objc\nint a = 66;\nstatic int b = 99;\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        void(^block)(void) = ^{\n            NSLog(@\"this is block a = %d, b = %d\", a, b);\n        };\n        a = 88;\n        b = 77;\n        block();\n    }\n    return 0;\n}\n// log：this is block a = 88, b = 77\n```\n\n生成的c++代码看下全局调用方式，可以发现结构体中没有a，b的成员变量，传递的时候是直接调用。\n\n![block_全局变量_c++源码](https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F_c%2B%2B%E6%BA%90%E7%A0%81.jpg)\n\n通过上述代码可以发现，`__main_block_impl_0` 没有添加任何变量，因此block不需要捕获全局变量，因为全局变量在哪都可以访问。\n\n**局部变量因为跨函数访问所以需要捕获，全局变量哪里都可以访问，因此不需要捕获。**\n\n|      变量类型      | 捕获到block内部 | 访问方式 |\n| :----------------: | :-------------: | :------: |\n|  局部变量（auto）  |        ✅        |  值传递  |\n| 局部变量（static） |        ✅        | 指针传递 |\n|      全局变量      |        ❌        | 直接访问 |\n\n**总结：局部变量都会被block捕获，自动变量是值捕获，静态变量是地址捕获，全局变量则不会被捕获。**\n","slug":"objc_block_01","published":1,"updated":"2021-12-04T10:13:16.646Z","_id":"ckwcb4urx00017cus6cc76zyl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Block本质\"><a href=\"#Block本质\" class=\"headerlink\" title=\"Block本质\"></a>Block本质</h2><blockquote>\n<p>1、Block本质是一个对象，内部有一个isa指针<br>2、封装了函数调用以及函数调用环境的OC对象</p>\n</blockquote>\n<h3 id=\"探索本质\"><a href=\"#探索本质\" class=\"headerlink\" title=\"探索本质\"></a>探索本质</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>; <span class=\"comment\">// 默认是 auto 类型变量</span></span><br><span class=\"line\">         <span class=\"keyword\">void</span>(^block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ^(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block a = %d, b = %d&quot;</span>, a, b);</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block, age = %d&quot;</span>,age);</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">         block(<span class=\"number\">2</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将示例代码转换为C++查看内部结构，与OC代码进行比较，转换代码如下:<br><code>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m</code></p>\n<p>编译之后的代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class=\"line\">         <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\">         <span class=\"keyword\">void</span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age));</span><br><span class=\"line\"></span><br><span class=\"line\">         ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义block变量\"><a href=\"#定义block变量\" class=\"headerlink\" title=\"定义block变量\"></a>定义block变量</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age));</span><br></pre></td></tr></table></figure>\n<p>上述代码中，可以发现block的定义调用了 <code>__main_block_impl_0</code> 函数，并将 <code>__main_block_impl_0</code> 的地址赋值给了block。下面我们分析下 <code>__main_block_impl_0</code> 的内部结构。</p>\n<h5 id=\"main-block-impl-0-结构体\"><a href=\"#main-block-impl-0-结构体\" class=\"headerlink\" title=\"__main_block_impl_0 结构体\"></a>__main_block_impl_0 结构体</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, <span class=\"keyword\">int</span> _age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : <span class=\"built_in\">age</span>(_age) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_impl_0</code> 结构体内部有一个同名构造函数 <code>__main_block_impl_0</code>，构造函数对变量进行了赋值，最终返回一个结构体。<br>构造函数中对一些变量进行了赋值（或者其他操作）最终会返回一个结构体。<br><code>__main_block_impl_0</code> 内部的构造函数传入了四个参数，<code>(void *)__main_block_func_0</code>、<code>&amp;__main_block_desc_0_DATA</code>、<code>age</code>、<code>flags</code>。其中 <code>flags</code> 有默认参数，在函数调用的时候可以省略不传。最后的 <code>age(_age)</code> 表示传入的 <code>_age</code> 会自动赋值给结构体内部的 <code>age</code> 成员，相当于 <code>age = _age</code>。</p>\n<p>接下来分析一下前面三个参数的具体内容</p>\n<h5 id=\"void-main-block-func-0\"><a href=\"#void-main-block-func-0\" class=\"headerlink\" title=\"(void *)__main_block_func_0\"></a>(void *)__main_block_func_0</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age = __cself-&gt;age; <span class=\"comment\">// bound by copy</span></span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>((NSString *)&amp;__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_0, a, b);</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>((NSString *)&amp;__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_1,age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_func_0</code> 函数中首先取出block中 <code>age</code> 的值，然后是两个NSLog的打印信息。在 <code>__main_block_func_0</code> 内部存储了block引用的外部的变量的值。而 <code>__main_block_impl_0</code> 函数中传入的第二个参数是 <code>(void *)__main_block_func_0</code>,也就是说block块内部的代码封装成了 <code>__main_block_func_0</code> 函数，并将 <code>__main_block_func_0</code> 函数的地址传入了 <code>__main_block_impl_0</code> 的构造函数中保存在了结构体内。</p>\n<h5 id=\"amp-main-block-desc-0-DATA\"><a href=\"#amp-main-block-desc-0-DATA\" class=\"headerlink\" title=\"&amp;__main_block_desc_0_DATA\"></a>&amp;__main_block_desc_0_DATA</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> reserved;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> Block_size;</span><br><span class=\"line\">&#125; __main_block_desc_0_DATA = &#123; <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_desc_0_DATA</code> 内部存储了两个参数，<code>reserved</code> 和 <code>Block_size</code>, <code>reserved</code> 直接赋值为0，<code>Block_size</code> 存储的是 <code>__main_block_impl_0</code> 所占用空间大小。最终将 <code>__main_block_desc_0</code> 结构体的地址传入 <code>__main_block_impl_0</code> 并赋值给 <code>Desc</code></p>\n<h5 id=\"age\"><a href=\"#age\" class=\"headerlink\" title=\"age\"></a>age</h5><p><code>age</code> 是我们定义的局部变量，因为在block内部使用到了局部变量，所以block声明的时候，这里会将 <code>age</code> 作为参数传入，也就是说block会捕获 <code>age</code>，如果没有在block中使用 <code>age</code> ，这里将只会传入 <code>(void *)__main_block_func_0</code> 和 <code>&amp;__main_block_desc_0_DATA</code> 这两个参数，如果有多个参数，那么传入的时候就会变成多个</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有捕获的情况</span></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class=\"line\"><span class=\"comment\">// 捕获多个变量</span></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age, name, numer));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再次查看-main-block-impl-0\"><a href=\"#再次查看-main-block-impl-0\" class=\"headerlink\" title=\"再次查看 __main_block_impl_0\"></a>再次查看 __main_block_impl_0</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, <span class=\"keyword\">int</span> _age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : <span class=\"built_in\">age</span>(_age) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;  <span class=\"comment\">// block内部代码块地址</span></span><br><span class=\"line\">    Desc = desc;        <span class=\"comment\">// block描述信息(占用内存大小)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>__main_block_impl_0</code> 的第一个变量就是 <code>__block_impl</code> 结构体，内部代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *isa;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Flags;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Reserved;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *FuncPtr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>__block_impl</code> 内部有一个 <code>isa</code> 指针。因此可以证明block本质上就是一个OC对象。而在构造函数中将函数传入的值分别存储在 <code>__main_block_impl_0</code> 结构体实例中，最终将结构体的地址赋值给block。</p>\n<p>通过上面对 <code>__main_block_impl_0</code> 结构体构造函数三个参数的问题，可以得出结论：<br>1.<code>__block_impl</code>结构体中 <code>isa</code> 指针存储着 <code>&amp;_NSConcreteStackBlock</code> 地址，可以暂时理解为其类对象地址，block 就是 <code>_NSConcreteStackBlock</code> 类型的。<br>2.block代码块中的代码呗封装成 <code>__main_block_func_0</code> 函数，<code>FuncPtr</code> 存储着 <code>__main_block_func_0</code> 函数的地址。<br>3.<code>Desc</code> 指向 <code>__main_block_desc_0</code>结构体对象，其中存储 <code>__main_block_impl_0</code> 结构体所占用的内存大小。</p>\n<h4 id=\"调用block执行内部代码\"><a href=\"#调用block执行内部代码\" class=\"headerlink\" title=\"调用block执行内部代码\"></a>调用block执行内部代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行block代码</span></span><br><span class=\"line\">((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(__block_impl *, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>通过上述代码可以发现，block 调用是通过 <code>block</code> 找到 <code>FuncPtr</code> 直接调用，通上面分析可以明确 block 执行的是 __main_block_impl_0 类型的结构体，但是在 <code>__main_block_impl_0</code> 内部并不能直接找到 <code>FuncPtr</code>，<code>FuncPtr</code> 是存在 <code>__block_impl</code> 中的。</p>\n<p><code>block</code> 可以直接调用 <code>__block_impl</code> 中的 <code>FuncPtr</code>原因，通过查看上述源码可以发现，<code>(__block_impl *)</code> 将 block 强制转换为了 <code>__block_impl</code> 类型，因为 <code>__block_impl</code> 是 <code>__main_block_impl_0</code> 结构体的第一个成员，相当于将 <code>__block_impl</code> 结构体的成员拿出来直接放在 <code>__main_block_impl_0</code> 中，也就说明 <code>__block_impl</code> 的内存地址就是 <code>__main_block_impl_0</code> 结构体内存地址的开头。所以可以转换成功，并找到 <code>FuncPtr</code> 成员。</p>\n<p>通过上述可以知道，<code>FuncPtr</code> 存储着代码块的函数地址，调用此函数就会执行代码块中的代码，回头查看 <code>__main_block_func_0</code> ，可以发现第一个参数就是 <code>__main_block_impl_0</code> 类型的指针。也就是说将 <code>block</code> 传入 <code>__main_block_func_0</code> 函数中，便于从中捕获 <code>block</code> 的值。</p>\n<h4 id=\"验证block的本质确实是-main-block-impl-0-结构体类型\"><a href=\"#验证block的本质确实是-main-block-impl-0-结构体类型\" class=\"headerlink\" title=\"验证block的本质确实是 __main_block_impl_0 结构体类型\"></a>验证block的本质确实是 __main_block_impl_0 结构体类型</h4><p>通过代码证明一下上述内容：通用使用之前的方法，我们按照上面分析block内部结构自定义结构体，并将block内部的结构体强制转换为自定义的结构体，转换成功说明底层结构体确实如之前分析的一样。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> __block_impl &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *isa;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Flags;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Reserved;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *FuncPtr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> __main_block_desc_0 &#123;</span><br><span class=\"line\">  size_t reserved;</span><br><span class=\"line\">  size_t Block_size;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> __main_block_impl_0 &#123;</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> __block_impl impl;</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> __main_block_desc_0* Desc;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>; <span class=\"comment\">// 默认是 auto 类型变量</span></span><br><span class=\"line\">         <span class=\"keyword\">void</span>(^block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ^(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block a = %d, b = %d&quot;</span>, a, b);</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block, age = %d&quot;</span>,age);</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 进行类型转换</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> __main_block_impl_0 *blockStruct = (__bridge <span class=\"keyword\">struct</span> __main_block_impl_0 *)block;</span><br><span class=\"line\">         block(<span class=\"number\">2</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过xcode断点可以看出自定义结构体可以被成功赋值。</p>\n<p> <img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81.jpeg\" alt=\"block_自定义构体验证\"></p>\n<p>接下来断点来到block代码块中，看下对战信息中心的函数调用地址。<code>Debug -&gt; Debug workflow -&gt; always show Disassembly</code> 。</p>\n<p> <img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81_%E6%B1%87%E7%BC%96.jpeg\" alt=\"block_自定义构体验证_汇编\"></p>\n<p>通过上图可以看到 <code>block</code> 的地址确实和 <code>FuncPtr</code> 的地址是一样的。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过上述分析已经对block底层有了一个基本认识，将上述代码转换为一张图片看下具体的关系。</p>\n<p><img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E7%BB%93%E6%9E%84%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BE.png\"></p>\n<p>block的底层数据可以通过一张图来展示</p>\n<p><img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\" alt=\"block_底层数据结构\"></p>\n<h2 id=\"block变量的捕获\"><a href=\"#block变量的捕获\" class=\"headerlink\" title=\"block变量的捕获\"></a>block变量的捕获</h2><p>为了保证block内部能正常访问外部的变量，block有一个变量捕获机制。</p>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><h4 id=\"auto变量\"><a href=\"#auto变量\" class=\"headerlink\" title=\"auto变量\"></a>auto变量</h4><p>上述代码中已经了解过block对age变量的捕获。auto自动变量，离开作用域就销毁，通常局部变量前面自动添加 <code>auto</code> 关键字。自动变量会捕获到block内部，也就是说block会专门新增一个参数来存储变量的值。<code>auto</code> 只存在于局部变量中，访问方式为值传递，通过上述对age参数额解释，我们也可以确定确实是值传递。</p>\n<h4 id=\"static变量\"><a href=\"#static变量\" class=\"headerlink\" title=\"static变量\"></a>static变量</h4><p>static修饰的变量为指针传递，同样会被block捕获。</p>\n<p>接下来分别添加auto修饰的局部变量和static修饰的局部变量，通过源码查看下他们的区别。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        auto <span class=\"keyword\">int</span> a = <span class=\"number\">66</span>;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b = <span class=\"number\">99</span>;</span><br><span class=\"line\">        <span class=\"keyword\">void</span>(^block)(<span class=\"keyword\">void</span>) = ^&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block a = %d, b = %d&quot;</span>, a, b);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        a = <span class=\"number\">88</span>;</span><br><span class=\"line\">        b = <span class=\"number\">77</span>;</span><br><span class=\"line\">        block();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// log：this is block a = 66, b = 77</span></span><br><span class=\"line\"><span class=\"comment\">// block中a的值并没有被改变，b的值被改变了</span></span><br></pre></td></tr></table></figure>\n\n<p>将源码转换成c++代码之后的两个参数的区别如下图：</p>\n<p><img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E4%B8%8D%E5%90%8C%E5%8F%98%E9%87%8F%E6%8D%95%E8%8E%B7%E7%9A%84%E5%8C%BA%E5%88%AB.jpeg\"></p>\n<p>从上述源码中可以看出，a，b两个变量都有捕获到block内部。但是a传入的是值，b传入的是地址。</p>\n<p>这两种变量产生差异的原因是，自动变量可能会销毁，block执行的时候自动变量有可能已经被销毁了，那么此时再去访问被销毁的地址肯定会发生坏的内存访问，因此对于自动变量一定是值传递而不是指针传递。而静态变量不会被销毁，所以完全可以传递地址。因为传递的是值的地址，所以block调用之前修改地址中保存的值，block中的地址是不会变的，所以值会随之改变。</p>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>示例代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">66</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b = <span class=\"number\">99</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span>(^block)(<span class=\"keyword\">void</span>) = ^&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block a = %d, b = %d&quot;</span>, a, b);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        a = <span class=\"number\">88</span>;</span><br><span class=\"line\">        b = <span class=\"number\">77</span>;</span><br><span class=\"line\">        block();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// log：this is block a = 88, b = 77</span></span><br></pre></td></tr></table></figure>\n\n<p>生成的c++代码看下全局调用方式，可以发现结构体中没有a，b的成员变量，传递的时候是直接调用。</p>\n<p><img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F_c%2B%2B%E6%BA%90%E7%A0%81.jpg\" alt=\"block_全局变量_c++源码\"></p>\n<p>通过上述代码可以发现，<code>__main_block_impl_0</code> 没有添加任何变量，因此block不需要捕获全局变量，因为全局变量在哪都可以访问。</p>\n<p><strong>局部变量因为跨函数访问所以需要捕获，全局变量哪里都可以访问，因此不需要捕获。</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">变量类型</th>\n<th align=\"center\">捕获到block内部</th>\n<th align=\"center\">访问方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">局部变量（auto）</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">值传递</td>\n</tr>\n<tr>\n<td align=\"center\">局部变量（static）</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">指针传递</td>\n</tr>\n<tr>\n<td align=\"center\">全局变量</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">直接访问</td>\n</tr>\n</tbody></table>\n<p><strong>总结：局部变量都会被block捕获，自动变量是值捕获，静态变量是地址捕获，全局变量则不会被捕获。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Block本质\"><a href=\"#Block本质\" class=\"headerlink\" title=\"Block本质\"></a>Block本质</h2><blockquote>\n<p>1、Block本质是一个对象，内部有一个isa指针<br>2、封装了函数调用以及函数调用环境的OC对象</p>\n</blockquote>\n<h3 id=\"探索本质\"><a href=\"#探索本质\" class=\"headerlink\" title=\"探索本质\"></a>探索本质</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>; <span class=\"comment\">// 默认是 auto 类型变量</span></span><br><span class=\"line\">         <span class=\"keyword\">void</span>(^block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ^(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block a = %d, b = %d&quot;</span>, a, b);</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block, age = %d&quot;</span>,age);</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">         block(<span class=\"number\">2</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将示例代码转换为C++查看内部结构，与OC代码进行比较，转换代码如下:<br><code>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m</code></p>\n<p>编译之后的代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class=\"line\">         <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\">         <span class=\"keyword\">void</span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age));</span><br><span class=\"line\"></span><br><span class=\"line\">         ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义block变量\"><a href=\"#定义block变量\" class=\"headerlink\" title=\"定义block变量\"></a>定义block变量</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age));</span><br></pre></td></tr></table></figure>\n<p>上述代码中，可以发现block的定义调用了 <code>__main_block_impl_0</code> 函数，并将 <code>__main_block_impl_0</code> 的地址赋值给了block。下面我们分析下 <code>__main_block_impl_0</code> 的内部结构。</p>\n<h5 id=\"main-block-impl-0-结构体\"><a href=\"#main-block-impl-0-结构体\" class=\"headerlink\" title=\"__main_block_impl_0 结构体\"></a>__main_block_impl_0 结构体</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, <span class=\"keyword\">int</span> _age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : <span class=\"built_in\">age</span>(_age) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_impl_0</code> 结构体内部有一个同名构造函数 <code>__main_block_impl_0</code>，构造函数对变量进行了赋值，最终返回一个结构体。<br>构造函数中对一些变量进行了赋值（或者其他操作）最终会返回一个结构体。<br><code>__main_block_impl_0</code> 内部的构造函数传入了四个参数，<code>(void *)__main_block_func_0</code>、<code>&amp;__main_block_desc_0_DATA</code>、<code>age</code>、<code>flags</code>。其中 <code>flags</code> 有默认参数，在函数调用的时候可以省略不传。最后的 <code>age(_age)</code> 表示传入的 <code>_age</code> 会自动赋值给结构体内部的 <code>age</code> 成员，相当于 <code>age = _age</code>。</p>\n<p>接下来分析一下前面三个参数的具体内容</p>\n<h5 id=\"void-main-block-func-0\"><a href=\"#void-main-block-func-0\" class=\"headerlink\" title=\"(void *)__main_block_func_0\"></a>(void *)__main_block_func_0</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age = __cself-&gt;age; <span class=\"comment\">// bound by copy</span></span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>((NSString *)&amp;__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_0, a, b);</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>((NSString *)&amp;__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_1,age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_func_0</code> 函数中首先取出block中 <code>age</code> 的值，然后是两个NSLog的打印信息。在 <code>__main_block_func_0</code> 内部存储了block引用的外部的变量的值。而 <code>__main_block_impl_0</code> 函数中传入的第二个参数是 <code>(void *)__main_block_func_0</code>,也就是说block块内部的代码封装成了 <code>__main_block_func_0</code> 函数，并将 <code>__main_block_func_0</code> 函数的地址传入了 <code>__main_block_impl_0</code> 的构造函数中保存在了结构体内。</p>\n<h5 id=\"amp-main-block-desc-0-DATA\"><a href=\"#amp-main-block-desc-0-DATA\" class=\"headerlink\" title=\"&amp;__main_block_desc_0_DATA\"></a>&amp;__main_block_desc_0_DATA</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> reserved;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> Block_size;</span><br><span class=\"line\">&#125; __main_block_desc_0_DATA = &#123; <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_desc_0_DATA</code> 内部存储了两个参数，<code>reserved</code> 和 <code>Block_size</code>, <code>reserved</code> 直接赋值为0，<code>Block_size</code> 存储的是 <code>__main_block_impl_0</code> 所占用空间大小。最终将 <code>__main_block_desc_0</code> 结构体的地址传入 <code>__main_block_impl_0</code> 并赋值给 <code>Desc</code></p>\n<h5 id=\"age\"><a href=\"#age\" class=\"headerlink\" title=\"age\"></a>age</h5><p><code>age</code> 是我们定义的局部变量，因为在block内部使用到了局部变量，所以block声明的时候，这里会将 <code>age</code> 作为参数传入，也就是说block会捕获 <code>age</code>，如果没有在block中使用 <code>age</code> ，这里将只会传入 <code>(void *)__main_block_func_0</code> 和 <code>&amp;__main_block_desc_0_DATA</code> 这两个参数，如果有多个参数，那么传入的时候就会变成多个</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有捕获的情况</span></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class=\"line\"><span class=\"comment\">// 捕获多个变量</span></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age, name, numer));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再次查看-main-block-impl-0\"><a href=\"#再次查看-main-block-impl-0\" class=\"headerlink\" title=\"再次查看 __main_block_impl_0\"></a>再次查看 __main_block_impl_0</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, <span class=\"keyword\">int</span> _age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : <span class=\"built_in\">age</span>(_age) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;  <span class=\"comment\">// block内部代码块地址</span></span><br><span class=\"line\">    Desc = desc;        <span class=\"comment\">// block描述信息(占用内存大小)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>__main_block_impl_0</code> 的第一个变量就是 <code>__block_impl</code> 结构体，内部代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *isa;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Flags;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Reserved;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *FuncPtr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>__block_impl</code> 内部有一个 <code>isa</code> 指针。因此可以证明block本质上就是一个OC对象。而在构造函数中将函数传入的值分别存储在 <code>__main_block_impl_0</code> 结构体实例中，最终将结构体的地址赋值给block。</p>\n<p>通过上面对 <code>__main_block_impl_0</code> 结构体构造函数三个参数的问题，可以得出结论：<br>1.<code>__block_impl</code>结构体中 <code>isa</code> 指针存储着 <code>&amp;_NSConcreteStackBlock</code> 地址，可以暂时理解为其类对象地址，block 就是 <code>_NSConcreteStackBlock</code> 类型的。<br>2.block代码块中的代码呗封装成 <code>__main_block_func_0</code> 函数，<code>FuncPtr</code> 存储着 <code>__main_block_func_0</code> 函数的地址。<br>3.<code>Desc</code> 指向 <code>__main_block_desc_0</code>结构体对象，其中存储 <code>__main_block_impl_0</code> 结构体所占用的内存大小。</p>\n<h4 id=\"调用block执行内部代码\"><a href=\"#调用block执行内部代码\" class=\"headerlink\" title=\"调用block执行内部代码\"></a>调用block执行内部代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行block代码</span></span><br><span class=\"line\">((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(__block_impl *, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>通过上述代码可以发现，block 调用是通过 <code>block</code> 找到 <code>FuncPtr</code> 直接调用，通上面分析可以明确 block 执行的是 __main_block_impl_0 类型的结构体，但是在 <code>__main_block_impl_0</code> 内部并不能直接找到 <code>FuncPtr</code>，<code>FuncPtr</code> 是存在 <code>__block_impl</code> 中的。</p>\n<p><code>block</code> 可以直接调用 <code>__block_impl</code> 中的 <code>FuncPtr</code>原因，通过查看上述源码可以发现，<code>(__block_impl *)</code> 将 block 强制转换为了 <code>__block_impl</code> 类型，因为 <code>__block_impl</code> 是 <code>__main_block_impl_0</code> 结构体的第一个成员，相当于将 <code>__block_impl</code> 结构体的成员拿出来直接放在 <code>__main_block_impl_0</code> 中，也就说明 <code>__block_impl</code> 的内存地址就是 <code>__main_block_impl_0</code> 结构体内存地址的开头。所以可以转换成功，并找到 <code>FuncPtr</code> 成员。</p>\n<p>通过上述可以知道，<code>FuncPtr</code> 存储着代码块的函数地址，调用此函数就会执行代码块中的代码，回头查看 <code>__main_block_func_0</code> ，可以发现第一个参数就是 <code>__main_block_impl_0</code> 类型的指针。也就是说将 <code>block</code> 传入 <code>__main_block_func_0</code> 函数中，便于从中捕获 <code>block</code> 的值。</p>\n<h4 id=\"验证block的本质确实是-main-block-impl-0-结构体类型\"><a href=\"#验证block的本质确实是-main-block-impl-0-结构体类型\" class=\"headerlink\" title=\"验证block的本质确实是 __main_block_impl_0 结构体类型\"></a>验证block的本质确实是 __main_block_impl_0 结构体类型</h4><p>通过代码证明一下上述内容：通用使用之前的方法，我们按照上面分析block内部结构自定义结构体，并将block内部的结构体强制转换为自定义的结构体，转换成功说明底层结构体确实如之前分析的一样。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> __block_impl &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *isa;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Flags;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Reserved;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *FuncPtr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> __main_block_desc_0 &#123;</span><br><span class=\"line\">  size_t reserved;</span><br><span class=\"line\">  size_t Block_size;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> __main_block_impl_0 &#123;</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> __block_impl impl;</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> __main_block_desc_0* Desc;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>; <span class=\"comment\">// 默认是 auto 类型变量</span></span><br><span class=\"line\">         <span class=\"keyword\">void</span>(^block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ^(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block a = %d, b = %d&quot;</span>, a, b);</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block, age = %d&quot;</span>,age);</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 进行类型转换</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> __main_block_impl_0 *blockStruct = (__bridge <span class=\"keyword\">struct</span> __main_block_impl_0 *)block;</span><br><span class=\"line\">         block(<span class=\"number\">2</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过xcode断点可以看出自定义结构体可以被成功赋值。</p>\n<p> <img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81.jpeg\" alt=\"block_自定义构体验证\"></p>\n<p>接下来断点来到block代码块中，看下对战信息中心的函数调用地址。<code>Debug -&gt; Debug workflow -&gt; always show Disassembly</code> 。</p>\n<p> <img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81_%E6%B1%87%E7%BC%96.jpeg\" alt=\"block_自定义构体验证_汇编\"></p>\n<p>通过上图可以看到 <code>block</code> 的地址确实和 <code>FuncPtr</code> 的地址是一样的。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过上述分析已经对block底层有了一个基本认识，将上述代码转换为一张图片看下具体的关系。</p>\n<p><img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E7%BB%93%E6%9E%84%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BE.png\"></p>\n<p>block的底层数据可以通过一张图来展示</p>\n<p><img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\" alt=\"block_底层数据结构\"></p>\n<h2 id=\"block变量的捕获\"><a href=\"#block变量的捕获\" class=\"headerlink\" title=\"block变量的捕获\"></a>block变量的捕获</h2><p>为了保证block内部能正常访问外部的变量，block有一个变量捕获机制。</p>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><h4 id=\"auto变量\"><a href=\"#auto变量\" class=\"headerlink\" title=\"auto变量\"></a>auto变量</h4><p>上述代码中已经了解过block对age变量的捕获。auto自动变量，离开作用域就销毁，通常局部变量前面自动添加 <code>auto</code> 关键字。自动变量会捕获到block内部，也就是说block会专门新增一个参数来存储变量的值。<code>auto</code> 只存在于局部变量中，访问方式为值传递，通过上述对age参数额解释，我们也可以确定确实是值传递。</p>\n<h4 id=\"static变量\"><a href=\"#static变量\" class=\"headerlink\" title=\"static变量\"></a>static变量</h4><p>static修饰的变量为指针传递，同样会被block捕获。</p>\n<p>接下来分别添加auto修饰的局部变量和static修饰的局部变量，通过源码查看下他们的区别。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        auto <span class=\"keyword\">int</span> a = <span class=\"number\">66</span>;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b = <span class=\"number\">99</span>;</span><br><span class=\"line\">        <span class=\"keyword\">void</span>(^block)(<span class=\"keyword\">void</span>) = ^&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block a = %d, b = %d&quot;</span>, a, b);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        a = <span class=\"number\">88</span>;</span><br><span class=\"line\">        b = <span class=\"number\">77</span>;</span><br><span class=\"line\">        block();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// log：this is block a = 66, b = 77</span></span><br><span class=\"line\"><span class=\"comment\">// block中a的值并没有被改变，b的值被改变了</span></span><br></pre></td></tr></table></figure>\n\n<p>将源码转换成c++代码之后的两个参数的区别如下图：</p>\n<p><img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E4%B8%8D%E5%90%8C%E5%8F%98%E9%87%8F%E6%8D%95%E8%8E%B7%E7%9A%84%E5%8C%BA%E5%88%AB.jpeg\"></p>\n<p>从上述源码中可以看出，a，b两个变量都有捕获到block内部。但是a传入的是值，b传入的是地址。</p>\n<p>这两种变量产生差异的原因是，自动变量可能会销毁，block执行的时候自动变量有可能已经被销毁了，那么此时再去访问被销毁的地址肯定会发生坏的内存访问，因此对于自动变量一定是值传递而不是指针传递。而静态变量不会被销毁，所以完全可以传递地址。因为传递的是值的地址，所以block调用之前修改地址中保存的值，block中的地址是不会变的，所以值会随之改变。</p>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>示例代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">66</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b = <span class=\"number\">99</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span>(^block)(<span class=\"keyword\">void</span>) = ^&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block a = %d, b = %d&quot;</span>, a, b);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        a = <span class=\"number\">88</span>;</span><br><span class=\"line\">        b = <span class=\"number\">77</span>;</span><br><span class=\"line\">        block();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// log：this is block a = 88, b = 77</span></span><br></pre></td></tr></table></figure>\n\n<p>生成的c++代码看下全局调用方式，可以发现结构体中没有a，b的成员变量，传递的时候是直接调用。</p>\n<p><img src=\"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F_c%2B%2B%E6%BA%90%E7%A0%81.jpg\" alt=\"block_全局变量_c++源码\"></p>\n<p>通过上述代码可以发现，<code>__main_block_impl_0</code> 没有添加任何变量，因此block不需要捕获全局变量，因为全局变量在哪都可以访问。</p>\n<p><strong>局部变量因为跨函数访问所以需要捕获，全局变量哪里都可以访问，因此不需要捕获。</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">变量类型</th>\n<th align=\"center\">捕获到block内部</th>\n<th align=\"center\">访问方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">局部变量（auto）</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">值传递</td>\n</tr>\n<tr>\n<td align=\"center\">局部变量（static）</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">指针传递</td>\n</tr>\n<tr>\n<td align=\"center\">全局变量</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">直接访问</td>\n</tr>\n</tbody></table>\n<p><strong>总结：局部变量都会被block捕获，自动变量是值捕获，静态变量是地址捕获，全局变量则不会被捕获。</strong></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81.jpeg","popularPost_tmp_gaData":{"updated":"Sat Dec 04 2021 18:13:16 GMT+0800 (中国标准时间)","title":"Block本质","path":"2021/11/23/objc_block_01/","eyeCatchImage":"https://xhp281-blog.oss-cn-beijing.aliyuncs.com/ios_objc/block_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%84%E4%BD%93%E9%AA%8C%E8%AF%81.jpeg","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-11-23T06:50:18.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-11-23T06:50:18.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"objc","tags":["Block"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"ckwcb4urx00017cus6cc76zyl","category_id":"ckwcb4us200037cusa8o8fef1","_id":"ckwcb4us400067cus9wyz1g35"}],"PostTag":[{"post_id":"ckwcb4urx00017cus6cc76zyl","tag_id":"ckwcb4us300047cusb9ug58mv","_id":"ckwcb4us400057cus4n1pct4f"}],"Tag":[{"name":"Block","_id":"ckwcb4us300047cusb9ug58mv"}]}}