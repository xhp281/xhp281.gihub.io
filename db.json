{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":0},{"_id":"source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"06c752ec38de449ce7218f4aefac92fbdd8429d6","modified":1635301016433},{"_id":"source/_posts/object-c_block_01.md","hash":"2a17311c7fadbe9f75717e006d5fc4260d7f792d","modified":1637665630142},{"_id":"source/categories/index.md","hash":"8317b26eb8a30505a430b14cc84d8c706263c2b5","modified":1635301016434},{"_id":"source/images/favicon-16x16-next.png","hash":"aacb4e09f5a77758b2f9ff3e5de9cbbe434818e2","modified":1635301016434},{"_id":"source/images/favicon-32x32-next.png","hash":"10e317fe1b15c7f8b9b82d7d75c10838a5183cad","modified":1635301016434},{"_id":"source/tags/index.md","hash":"788e2efc923ef542faa0878a4681ed43766ffd36","modified":1635301016434},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"afdebdb0be4158c0bf0a408109a5aa42c496dffd","modified":1635301015037},{"_id":"node_modules/hexo-theme-next/package.json","hash":"6783c4d036ff49ac1dd109825556164b4b6af30d","modified":1635301015053},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1635301015037},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1635301015038},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1635301015038},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1635301015037},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"9ffffefd15864b6d6c3225b999b9a8e181df153d","modified":1635301015037},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1635301015038},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1635301015052},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1635301015052},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1635301015052},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":1635301015052},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1635301015053},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1635301015053},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1635301015039},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1635301015042},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1635301015039},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1635301015039},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":1635301015039},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1635301015040},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1635301015039},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1635301015040},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1635301015040},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1635301015040},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1635301015040},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1635301015040},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1635301015040},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1635301015040},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1635301015041},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":1635301015041},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1635301015041},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1635301015041},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1635301015042},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1635301015041},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1635301015041},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1635301015042},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1635301015042},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1635301015038},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1635301015039},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1635301015038},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1635301015039},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1635301015043},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":1635301015043},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"a20ed899d6a797de0b35c46bfd03722023649187","modified":1635301015043},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1635301015048},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1635301015048},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1635301015051},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1635301015050},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"3221ebcb2f308659ed1a86d1d53978aa62576958","modified":1635301015050},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1635301015051},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1635301015043},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1635301015044},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1635301015053},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1635301015055},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":1635301015055},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"7dc9e9366a19dc3c7be7ff482fbd19c88e620bf5","modified":1635301015055},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1635301015045},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1635301015046},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":1635301015056},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":1635301015056},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1635301015056},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1635301015056},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"3850424dbb23ca0791b35695e24804492d89f925","modified":1635301015056},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1635301015056},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1635301015057},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1635301015048},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1635301015057},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1635301015057},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1635301015057},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1635301015057},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1635301015057},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1635301015057},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1635301015058},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1635301015058},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1635301015058},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1635301015058},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1635301015057},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1635301015058},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":1635301015067},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1635301015071},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1635301015071},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1635301015071},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1635301015071},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1635301015071},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1635301015071},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1635301015072},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1635301015072},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1635301015072},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1635301015072},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1635301015072},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1635301015072},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1635301015072},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"b1d24dc9ebc2a3b4a4c5a4f737de2f8ef126cfa9","modified":1635301015072},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1635301015073},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1635301015048},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1635301015048},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1635301015073},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1635301015049},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1635301015049},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1635301015049},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1635301015049},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1635301015049},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1635301015049},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1635301015049},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"a4d42422119a0dacad426f033ea3aaf4e3cf339b","modified":1635301015077},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1635301015050},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1635301015049},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1635301015050},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1635301015050},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1635301015050},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1635301015050},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1635301015050},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1635301015051},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1635301015051},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1635301015051},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"3fc91aba5b17a5ae60b8e04707a7da87db4d0340","modified":1635301015051},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1635301015051},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1635301015051},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1635301015052},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1635301015052},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1635301015052},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1635301015052},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"49aa8de07918a11399131dfd703418af3f0a1a19","modified":1635301015044},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"8ed5ab7ec63f9fd5438d1c497cc5f50ae11fcfdf","modified":1635301015044},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":1635301015044},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1635301015045},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1635301015045},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1635301015045},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1635301015045},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1635301015045},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1635301015045},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1635301015046},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1635301015046},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1635301015046},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1635301015046},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1635301015046},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1635301015047},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":1635301015047},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"471dcbe22d0dbe043dcf25a1a1c17ca76aa9a548","modified":1635301015047},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1635301015047},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"5c01e380ba843f8016d8fa4593432430f5bd3584","modified":1635301015048},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"92ab6bb3c3122980699f0613dac27a7cabfedecc","modified":1635301015053},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1635301015053},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1635301015053},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1635301015054},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"08dac57e15c9f06c7cf54884b045f2362595f9d2","modified":1635301015054},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":1635301015054},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1635301015047},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1635301015055},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1635301015047},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1635301015054},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1635301015054},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1635301015054},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1635301015055},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1635301015055},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1635301015047},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1635301015055},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1635301015055},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1635301015070},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1635301015070},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1635301015071},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1635301015070},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1635301015073},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1635301015075},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":1635301015071},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1635301015075},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1635301015075},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1635301015059},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":1635301015059},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":1635301015059},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"2a29bf3692f42f84e8f29314e0fb349f86fc727a","modified":1635301015062},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1635301015064},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"aafbb3c5c20f525a92716d89ff216c3081d7b4da","modified":1635301015064},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"2e58cb90a77d3dd16e02b8949808b4b16453828c","modified":1635301015065},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1635301015065},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1635301015065},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1635301015066},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1635301015066},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":1635301015066},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1635301015066},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1635301015067},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1635301015068},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1635301015068},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1635301015068},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1635301015068},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1635301015068},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1635301015067},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1635301015069},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1635301015070},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1635301015070},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1635301015070},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1635301015070},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1635301015070},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1635301015069},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1635301015068},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1635301015069},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1635301015069},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1635301015069},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1635301015069},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1635301015073},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1635301015073},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1635301015073},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1635301015074},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1635301015074},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1635301015074},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1635301015074},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1635301015074},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1635301015074},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1635301015074},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1635301015074},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1635301015074},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1635301015075},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1635301015075},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1635301015075},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1635301015075},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1635301015076},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1635301015076},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1635301015076},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1635301015077},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":1635301015077},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1635301015059},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1635301015059},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1635301015059},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1635301015059},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1635301015060},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1635301015060},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1635301015060},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1635301015060},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1635301015061},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1635301015061},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1635301015061},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"bef7791a2e67e79f02076f2a89e1c7f95a83048c","modified":1635301015061},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1635301015061},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1635301015061},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1635301015061},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":1635301015062},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":1635301015062},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":1635301015062},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1635301015062},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1635301015062},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":1635301015062},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"5a4e5ed613f3990378f3f632e8f16b33374e0095","modified":1635301015063},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":1635301015063},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":1635301015063},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1635301015063},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1635301015063},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":1635301015063},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1635301015063},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"eae7b83f1c711ad2ab3a41d89f517445856ffec8","modified":1635301015064},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1635301015064},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1635301015064},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1635301015064},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1635301015064},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1635301015064},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1635301015064},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":1635301015065},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1635301015065},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":1635301015065},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1635301015065},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":1635301015066},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1635301015066},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1635301015066},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1635301015066},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1635301015066},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2421500e447822ef1b6826403a3e1df3345641d7","modified":1635301015067},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1635301015067},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":1635301015067},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1635301015067},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":1635301015067},{"_id":"public/categories/index.html","hash":"043bd0289e8773d913a39e82d47529555bea16ea","modified":1637659999045},{"_id":"public/tags/index.html","hash":"ce85b9bad998dff72162939f5626bf721883cc89","modified":1637659999045},{"_id":"public/archives/index.html","hash":"3c3e7f981c69a39532fe67fb97c1ad42498257db","modified":1637659999045},{"_id":"public/archives/2021/index.html","hash":"3511b29ad3579dad58279f6eff540b5d1936619d","modified":1637659999045},{"_id":"public/archives/2021/11/index.html","hash":"94f20487f5d7a174cd0556febcaf1bcaaf2a924d","modified":1637659999045},{"_id":"public/tags/test-tag/index.html","hash":"bb504bac4c93ee9fecbc6e7b1afe3499dd44faf6","modified":1637659999045},{"_id":"public/categories/test-categories/index.html","hash":"6055494489f85a133c0cbec257784ce470f35d10","modified":1637659999045},{"_id":"public/2021/11/23/object-c_block_01/index.html","hash":"827b1abd09137563153913995466c563d0c0575b","modified":1637659999045},{"_id":"public/index.html","hash":"ed8f567b5d63b504019697367c4383ffb770e519","modified":1637659999045},{"_id":"public/CNAME","hash":"06c752ec38de449ce7218f4aefac92fbdd8429d6","modified":1637659999045},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637659999045},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637659999045},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637659999045},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1637659999045},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1637659999045},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1637659999045},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1637659999045},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1637659999045},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1637659999045},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1637659999045},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1637659999045},{"_id":"public/js/next-boot.js","hash":"b1d24dc9ebc2a3b4a4c5a4f737de2f8ef126cfa9","modified":1637659999045},{"_id":"public/js/utils.js","hash":"a4d42422119a0dacad426f033ea3aaf4e3cf339b","modified":1637659999045},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1637659999045},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1637659999045},{"_id":"public/css/main.css","hash":"87df300f9acd4dbe704c19490fa7280aac8ead46","modified":1637659999045}],"Category":[{"name":"test_categories","_id":"ckwbwhav40003m2859gela1bx"}],"Data":[],"Page":[{"title":"categories","date":"2021-09-03T07:31:49.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-09-03 15:31:49\ntype: categories\n---\n","updated":"2021-10-27T02:16:56.434Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckwbwhauz0000m285en846a0i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2014-12-22T04:39:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2014-12-22 12:39:04\ntype: tags\n---\n","updated":"2021-10-27T02:16:56.434Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckwbwhav30002m2851huzf6o9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Block本质","date":"2021-11-23T06:50:18.000Z","_content":"### Block本质\n> 1、Block本质是一个对象，内部有一个isa指针\n> 2、封装了函数调用以及函数调用环境的OC对象\n\n### 探索本质\n```objc\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n         int age = 10; // 默认是 auto 类型变量\n         void(^block)(int, int) = ^(int a, int b){\n             NSLog(@\"this is block a = %d, b = %d\", a, b);\n             NSLog(@\"this is block, age = %d\",age);\n         };\n         block(2,1);\n    }\n    return 0;\n}\n```\n\n将示例代码转换为C++查看内部结构，与OC代码进行比较，转换代码如下\n`xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m`\n\n编译之后的代码如下\n```objc\nint main(int argc, const char * argv[]) {\n    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n         int age = 10;\n         void(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age));\n\n         ((void (*)(__block_impl *, int, int))((__block_impl *)block)->FuncPtr)((__block_impl *)block, 2, 1);\n    }\n    return 0;\n}\n```\n\n#### 定义block变量\n```c++\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age));\n```\n上述代码中，可以发现block的定义调用了 `__main_block_impl_0` 函数，并将 `__main_block_impl_0` 的地址赋值给了block。下面我们分析下 `__main_block_impl_0` 的内部结构。\n\n##### __main_block_impl_0 结构体\n```c++\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _age, int flags=0) : age(_age) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n```\n\n在 `__main_block_impl_0` 结构体内部有一个同名构造函数 `__main_block_impl_0`，构造函数对变量进行了赋值，最终返回一个结构体。\n构造函数中对一些变量进行了赋值（或者其他操作）最终会返回一个结构体。\n`__main_block_impl_0` 内部的构造函数传入了四个参数，`(void *)__main_block_func_0`、`&__main_block_desc_0_DATA`、`age`、`flags`。其中 `flags` 有默认参数，在函数调用的时候可以省略不传。最后的 `age(_age)` 表示传入的 `_age` 会自动赋值给结构体内部的 `age` 成员，相当于 `age = _age`。\n\n接下来分析一下前面三个参数的具体内容\n\n##### (void *)__main_block_func_0\n```c++\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself, int a, int b) {\n  int age = __cself->age; // bound by copy\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_0, a, b);\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_1,age);\n}\n```\n\n在 `__main_block_func_0` 函数中首先取出block中 `age` 的值，然后是两个NSLog的打印信息。在 `__main_block_func_0` 内部存储了block引用的外部的变量的值。而 `__main_block_impl_0` 函数中传入的第二个参数是 `(void *)__main_block_func_0`,也就是说block块内部的代码封装成了 `__main_block_func_0` 函数，并将 `__main_block_func_0` 函数的地址传入了 `__main_block_impl_0` 的构造函数中保存在了结构体内。\n\n##### &__main_block_desc_0_DATA\n```c++\nstatic struct __main_block_desc_0 {\n  size_t reserved;\n  size_t Block_size;\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n```\n\n在 `__main_block_desc_0_DATA` 内部存储了两个参数，`reserved` 和 `Block_size`, `reserved` 直接赋值为0，`Block_size` 存储的是 `__main_block_impl_0` 所占用空间大小。最终将 `__main_block_desc_0` 结构体的地址传入 `__main_block_impl_0` 并赋值给 `Desc`\n\n##### age\n`age` 是我们定义的局部变量，因为在block内部使用到了局部变量，所以block声明的时候，这里会将 `age` 作为参数传入，也就是说block会捕获 `age`，如果没有在block中使用 `age` ，这里将只会传入 `(void *)__main_block_func_0` 和 `&__main_block_desc_0_DATA` 这两个参数，如果有多个参数，那么传入的时候就会变成多个\n\n```c++\n// 没有捕获的情况\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA));\n// 捕获多个变量\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age, name, numer));\n```\n\n#### 再次查看 __main_block_impl_0 \n```c++\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _age, int flags=0) : age(_age) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;  // block内部代码块地址\n    Desc = desc;        // block描述信息(占用内存大小)\n  }\n};\n```\n`__main_block_impl_0` 的第一个变量就是 `__block_impl` 结构体，内部代码如下：\n```c++\nstruct __block_impl {\n  void *isa;\n  int Flags;\n  int Reserved;\n  void *FuncPtr;\n};\n```\n\n`__block_impl` 内部有一个 `isa` 指针。因此可以证明block本质上就是一个OC对象。而在构造函数中将函数传入的值分别存储在 `__main_block_impl_0` 结构体实例中，最终将结构体的地址赋值给block。\n\n通过上面对 `__main_block_impl_0` 结构体构造函数三个参数的问题，可以得出结论：\n1.`__block_impl`结构体中 `isa` 指针存储着 `&_NSConcreteStackBlock` 地址，可以暂时理解为其类对象地址，block就是 `_NSConcreteStackBlock` 类型的。\n2.block代码块中的代码呗封装成 `__main_block_func_0` 函数，`FuncPtr` 存储着 `__main_block_func_0` 函数的地址。\n3.`Desc` 指向 `__main_block_desc_0`结构体对象，其中存储 `__main_block_impl_0` 结构体所占用的内存大小。\n\n#### 调用block执行内部代码\n```c++\n// 执行block代码\n((void (*)(__block_impl *, int, int))((__block_impl *)block)->FuncPtr)((__block_impl *)block, 2, 1);\n```\n通过上述代码可以发现，block调用是通过 `block` 找到 `FuncPtr` 直接调用，通上面分析可以明确 block 执行的是 ```__main_block_impl_0``` 类型的结构体，但是在 `__main_block_impl_0` 内部并不能直接找到 `FuncPtr`，`FuncPtr` 是存在 `__block_impl` 中的。\n\n<code>\\`1111</code>\n\n比如`突出背景色`来显示强调效果","source":"_posts/object-c_block_01.md","raw":"title: Block本质\ncategories:\n  - test_categories\ntags:\n  - test_tag\ndate: 2021-11-23 14:50:18\n---\n### Block本质\n> 1、Block本质是一个对象，内部有一个isa指针\n> 2、封装了函数调用以及函数调用环境的OC对象\n\n### 探索本质\n```objc\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n         int age = 10; // 默认是 auto 类型变量\n         void(^block)(int, int) = ^(int a, int b){\n             NSLog(@\"this is block a = %d, b = %d\", a, b);\n             NSLog(@\"this is block, age = %d\",age);\n         };\n         block(2,1);\n    }\n    return 0;\n}\n```\n\n将示例代码转换为C++查看内部结构，与OC代码进行比较，转换代码如下\n`xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m`\n\n编译之后的代码如下\n```objc\nint main(int argc, const char * argv[]) {\n    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n         int age = 10;\n         void(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age));\n\n         ((void (*)(__block_impl *, int, int))((__block_impl *)block)->FuncPtr)((__block_impl *)block, 2, 1);\n    }\n    return 0;\n}\n```\n\n#### 定义block变量\n```c++\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age));\n```\n上述代码中，可以发现block的定义调用了 `__main_block_impl_0` 函数，并将 `__main_block_impl_0` 的地址赋值给了block。下面我们分析下 `__main_block_impl_0` 的内部结构。\n\n##### __main_block_impl_0 结构体\n```c++\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _age, int flags=0) : age(_age) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n```\n\n在 `__main_block_impl_0` 结构体内部有一个同名构造函数 `__main_block_impl_0`，构造函数对变量进行了赋值，最终返回一个结构体。\n构造函数中对一些变量进行了赋值（或者其他操作）最终会返回一个结构体。\n`__main_block_impl_0` 内部的构造函数传入了四个参数，`(void *)__main_block_func_0`、`&__main_block_desc_0_DATA`、`age`、`flags`。其中 `flags` 有默认参数，在函数调用的时候可以省略不传。最后的 `age(_age)` 表示传入的 `_age` 会自动赋值给结构体内部的 `age` 成员，相当于 `age = _age`。\n\n接下来分析一下前面三个参数的具体内容\n\n##### (void *)__main_block_func_0\n```c++\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself, int a, int b) {\n  int age = __cself->age; // bound by copy\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_0, a, b);\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_1,age);\n}\n```\n\n在 `__main_block_func_0` 函数中首先取出block中 `age` 的值，然后是两个NSLog的打印信息。在 `__main_block_func_0` 内部存储了block引用的外部的变量的值。而 `__main_block_impl_0` 函数中传入的第二个参数是 `(void *)__main_block_func_0`,也就是说block块内部的代码封装成了 `__main_block_func_0` 函数，并将 `__main_block_func_0` 函数的地址传入了 `__main_block_impl_0` 的构造函数中保存在了结构体内。\n\n##### &__main_block_desc_0_DATA\n```c++\nstatic struct __main_block_desc_0 {\n  size_t reserved;\n  size_t Block_size;\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n```\n\n在 `__main_block_desc_0_DATA` 内部存储了两个参数，`reserved` 和 `Block_size`, `reserved` 直接赋值为0，`Block_size` 存储的是 `__main_block_impl_0` 所占用空间大小。最终将 `__main_block_desc_0` 结构体的地址传入 `__main_block_impl_0` 并赋值给 `Desc`\n\n##### age\n`age` 是我们定义的局部变量，因为在block内部使用到了局部变量，所以block声明的时候，这里会将 `age` 作为参数传入，也就是说block会捕获 `age`，如果没有在block中使用 `age` ，这里将只会传入 `(void *)__main_block_func_0` 和 `&__main_block_desc_0_DATA` 这两个参数，如果有多个参数，那么传入的时候就会变成多个\n\n```c++\n// 没有捕获的情况\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA));\n// 捕获多个变量\nvoid(*block)(int, int) = ((void (*)(int, int))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, age, name, numer));\n```\n\n#### 再次查看 __main_block_impl_0 \n```c++\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _age, int flags=0) : age(_age) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;  // block内部代码块地址\n    Desc = desc;        // block描述信息(占用内存大小)\n  }\n};\n```\n`__main_block_impl_0` 的第一个变量就是 `__block_impl` 结构体，内部代码如下：\n```c++\nstruct __block_impl {\n  void *isa;\n  int Flags;\n  int Reserved;\n  void *FuncPtr;\n};\n```\n\n`__block_impl` 内部有一个 `isa` 指针。因此可以证明block本质上就是一个OC对象。而在构造函数中将函数传入的值分别存储在 `__main_block_impl_0` 结构体实例中，最终将结构体的地址赋值给block。\n\n通过上面对 `__main_block_impl_0` 结构体构造函数三个参数的问题，可以得出结论：\n1.`__block_impl`结构体中 `isa` 指针存储着 `&_NSConcreteStackBlock` 地址，可以暂时理解为其类对象地址，block就是 `_NSConcreteStackBlock` 类型的。\n2.block代码块中的代码呗封装成 `__main_block_func_0` 函数，`FuncPtr` 存储着 `__main_block_func_0` 函数的地址。\n3.`Desc` 指向 `__main_block_desc_0`结构体对象，其中存储 `__main_block_impl_0` 结构体所占用的内存大小。\n\n#### 调用block执行内部代码\n```c++\n// 执行block代码\n((void (*)(__block_impl *, int, int))((__block_impl *)block)->FuncPtr)((__block_impl *)block, 2, 1);\n```\n通过上述代码可以发现，block调用是通过 `block` 找到 `FuncPtr` 直接调用，通上面分析可以明确 block 执行的是 ```__main_block_impl_0``` 类型的结构体，但是在 `__main_block_impl_0` 内部并不能直接找到 `FuncPtr`，`FuncPtr` 是存在 `__block_impl` 中的。\n\n<code>\\`1111</code>\n\n比如`突出背景色`来显示强调效果","slug":"object-c_block_01","published":1,"updated":"2021-11-23T11:07:10.142Z","_id":"ckwbwhav10001m2859gfp9rdy","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Block本质\"><a href=\"#Block本质\" class=\"headerlink\" title=\"Block本质\"></a>Block本质</h3><blockquote>\n<p>1、Block本质是一个对象，内部有一个isa指针<br>2、封装了函数调用以及函数调用环境的OC对象</p>\n</blockquote>\n<h3 id=\"探索本质\"><a href=\"#探索本质\" class=\"headerlink\" title=\"探索本质\"></a>探索本质</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>; <span class=\"comment\">// 默认是 auto 类型变量</span></span><br><span class=\"line\">         <span class=\"keyword\">void</span>(^block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ^(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block a = %d, b = %d&quot;</span>, a, b);</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block, age = %d&quot;</span>,age);</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">         block(<span class=\"number\">2</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将示例代码转换为C++查看内部结构，与OC代码进行比较，转换代码如下<br><code>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m</code></p>\n<p>编译之后的代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class=\"line\">         <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\">         <span class=\"keyword\">void</span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age));</span><br><span class=\"line\"></span><br><span class=\"line\">         ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义block变量\"><a href=\"#定义block变量\" class=\"headerlink\" title=\"定义block变量\"></a>定义block变量</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age));</span><br></pre></td></tr></table></figure>\n<p>上述代码中，可以发现block的定义调用了 <code>__main_block_impl_0</code> 函数，并将 <code>__main_block_impl_0</code> 的地址赋值给了block。下面我们分析下 <code>__main_block_impl_0</code> 的内部结构。</p>\n<h5 id=\"main-block-impl-0-结构体\"><a href=\"#main-block-impl-0-结构体\" class=\"headerlink\" title=\"__main_block_impl_0 结构体\"></a>__main_block_impl_0 结构体</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, <span class=\"keyword\">int</span> _age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : <span class=\"built_in\">age</span>(_age) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_impl_0</code> 结构体内部有一个同名构造函数 <code>__main_block_impl_0</code>，构造函数对变量进行了赋值，最终返回一个结构体。<br>构造函数中对一些变量进行了赋值（或者其他操作）最终会返回一个结构体。<br><code>__main_block_impl_0</code> 内部的构造函数传入了四个参数，<code>(void *)__main_block_func_0</code>、<code>&amp;__main_block_desc_0_DATA</code>、<code>age</code>、<code>flags</code>。其中 <code>flags</code> 有默认参数，在函数调用的时候可以省略不传。最后的 <code>age(_age)</code> 表示传入的 <code>_age</code> 会自动赋值给结构体内部的 <code>age</code> 成员，相当于 <code>age = _age</code>。</p>\n<p>接下来分析一下前面三个参数的具体内容</p>\n<h5 id=\"void-main-block-func-0\"><a href=\"#void-main-block-func-0\" class=\"headerlink\" title=\"(void *)__main_block_func_0\"></a>(void *)__main_block_func_0</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age = __cself-&gt;age; <span class=\"comment\">// bound by copy</span></span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>((NSString *)&amp;__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_0, a, b);</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>((NSString *)&amp;__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_1,age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_func_0</code> 函数中首先取出block中 <code>age</code> 的值，然后是两个NSLog的打印信息。在 <code>__main_block_func_0</code> 内部存储了block引用的外部的变量的值。而 <code>__main_block_impl_0</code> 函数中传入的第二个参数是 <code>(void *)__main_block_func_0</code>,也就是说block块内部的代码封装成了 <code>__main_block_func_0</code> 函数，并将 <code>__main_block_func_0</code> 函数的地址传入了 <code>__main_block_impl_0</code> 的构造函数中保存在了结构体内。</p>\n<h5 id=\"amp-main-block-desc-0-DATA\"><a href=\"#amp-main-block-desc-0-DATA\" class=\"headerlink\" title=\"&amp;__main_block_desc_0_DATA\"></a>&amp;__main_block_desc_0_DATA</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> reserved;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> Block_size;</span><br><span class=\"line\">&#125; __main_block_desc_0_DATA = &#123; <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_desc_0_DATA</code> 内部存储了两个参数，<code>reserved</code> 和 <code>Block_size</code>, <code>reserved</code> 直接赋值为0，<code>Block_size</code> 存储的是 <code>__main_block_impl_0</code> 所占用空间大小。最终将 <code>__main_block_desc_0</code> 结构体的地址传入 <code>__main_block_impl_0</code> 并赋值给 <code>Desc</code></p>\n<h5 id=\"age\"><a href=\"#age\" class=\"headerlink\" title=\"age\"></a>age</h5><p><code>age</code> 是我们定义的局部变量，因为在block内部使用到了局部变量，所以block声明的时候，这里会将 <code>age</code> 作为参数传入，也就是说block会捕获 <code>age</code>，如果没有在block中使用 <code>age</code> ，这里将只会传入 <code>(void *)__main_block_func_0</code> 和 <code>&amp;__main_block_desc_0_DATA</code> 这两个参数，如果有多个参数，那么传入的时候就会变成多个</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有捕获的情况</span></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class=\"line\"><span class=\"comment\">// 捕获多个变量</span></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age, name, numer));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再次查看-main-block-impl-0\"><a href=\"#再次查看-main-block-impl-0\" class=\"headerlink\" title=\"再次查看 __main_block_impl_0\"></a>再次查看 __main_block_impl_0</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, <span class=\"keyword\">int</span> _age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : <span class=\"built_in\">age</span>(_age) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;  <span class=\"comment\">// block内部代码块地址</span></span><br><span class=\"line\">    Desc = desc;        <span class=\"comment\">// block描述信息(占用内存大小)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>__main_block_impl_0</code> 的第一个变量就是 <code>__block_impl</code> 结构体，内部代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *isa;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Flags;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Reserved;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *FuncPtr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>__block_impl</code> 内部有一个 <code>isa</code> 指针。因此可以证明block本质上就是一个OC对象。而在构造函数中将函数传入的值分别存储在 <code>__main_block_impl_0</code> 结构体实例中，最终将结构体的地址赋值给block。</p>\n<p>通过上面对 <code>__main_block_impl_0</code> 结构体构造函数三个参数的问题，可以得出结论：<br>1.<code>__block_impl</code>结构体中 <code>isa</code> 指针存储着 <code>&amp;_NSConcreteStackBlock</code> 地址，可以暂时理解为其类对象地址，block就是 <code>_NSConcreteStackBlock</code> 类型的。<br>2.block代码块中的代码呗封装成 <code>__main_block_func_0</code> 函数，<code>FuncPtr</code> 存储着 <code>__main_block_func_0</code> 函数的地址。<br>3.<code>Desc</code> 指向 <code>__main_block_desc_0</code>结构体对象，其中存储 <code>__main_block_impl_0</code> 结构体所占用的内存大小。</p>\n<h4 id=\"调用block执行内部代码\"><a href=\"#调用block执行内部代码\" class=\"headerlink\" title=\"调用block执行内部代码\"></a>调用block执行内部代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行block代码</span></span><br><span class=\"line\">((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(__block_impl *, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>通过上述代码可以发现，block调用是通过 <code>block</code> 找到 <code>FuncPtr</code> 直接调用，通上面分析可以明确 block 执行的是 <code>__main_block_impl_0</code> 类型的结构体，但是在 <code>__main_block_impl_0</code> 内部并不能直接找到 <code>FuncPtr</code>，<code>FuncPtr</code> 是存在 <code>__block_impl</code> 中的。</p>\n<p><code>`1111</code></p>\n<p>比如<code>突出背景色</code>来显示强调效果</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Block本质\"><a href=\"#Block本质\" class=\"headerlink\" title=\"Block本质\"></a>Block本质</h3><blockquote>\n<p>1、Block本质是一个对象，内部有一个isa指针<br>2、封装了函数调用以及函数调用环境的OC对象</p>\n</blockquote>\n<h3 id=\"探索本质\"><a href=\"#探索本质\" class=\"headerlink\" title=\"探索本质\"></a>探索本质</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>; <span class=\"comment\">// 默认是 auto 类型变量</span></span><br><span class=\"line\">         <span class=\"keyword\">void</span>(^block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ^(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block a = %d, b = %d&quot;</span>, a, b);</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;this is block, age = %d&quot;</span>,age);</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">         block(<span class=\"number\">2</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将示例代码转换为C++查看内部结构，与OC代码进行比较，转换代码如下<br><code>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m</code></p>\n<p>编译之后的代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class=\"line\">         <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\">         <span class=\"keyword\">void</span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age));</span><br><span class=\"line\"></span><br><span class=\"line\">         ((<span class=\"keyword\">void</span> (*)(__block_impl *, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义block变量\"><a href=\"#定义block变量\" class=\"headerlink\" title=\"定义block变量\"></a>定义block变量</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age));</span><br></pre></td></tr></table></figure>\n<p>上述代码中，可以发现block的定义调用了 <code>__main_block_impl_0</code> 函数，并将 <code>__main_block_impl_0</code> 的地址赋值给了block。下面我们分析下 <code>__main_block_impl_0</code> 的内部结构。</p>\n<h5 id=\"main-block-impl-0-结构体\"><a href=\"#main-block-impl-0-结构体\" class=\"headerlink\" title=\"__main_block_impl_0 结构体\"></a>__main_block_impl_0 结构体</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, <span class=\"keyword\">int</span> _age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : <span class=\"built_in\">age</span>(_age) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_impl_0</code> 结构体内部有一个同名构造函数 <code>__main_block_impl_0</code>，构造函数对变量进行了赋值，最终返回一个结构体。<br>构造函数中对一些变量进行了赋值（或者其他操作）最终会返回一个结构体。<br><code>__main_block_impl_0</code> 内部的构造函数传入了四个参数，<code>(void *)__main_block_func_0</code>、<code>&amp;__main_block_desc_0_DATA</code>、<code>age</code>、<code>flags</code>。其中 <code>flags</code> 有默认参数，在函数调用的时候可以省略不传。最后的 <code>age(_age)</code> 表示传入的 <code>_age</code> 会自动赋值给结构体内部的 <code>age</code> 成员，相当于 <code>age = _age</code>。</p>\n<p>接下来分析一下前面三个参数的具体内容</p>\n<h5 id=\"void-main-block-func-0\"><a href=\"#void-main-block-func-0\" class=\"headerlink\" title=\"(void *)__main_block_func_0\"></a>(void *)__main_block_func_0</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age = __cself-&gt;age; <span class=\"comment\">// bound by copy</span></span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>((NSString *)&amp;__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_0, a, b);</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>((NSString *)&amp;__NSConstantStringImpl__var_folders_nf_7714tb2x50vctp5b0v2xmpt4nrww4l_T_main_6c06d8_mi_1,age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_func_0</code> 函数中首先取出block中 <code>age</code> 的值，然后是两个NSLog的打印信息。在 <code>__main_block_func_0</code> 内部存储了block引用的外部的变量的值。而 <code>__main_block_impl_0</code> 函数中传入的第二个参数是 <code>(void *)__main_block_func_0</code>,也就是说block块内部的代码封装成了 <code>__main_block_func_0</code> 函数，并将 <code>__main_block_func_0</code> 函数的地址传入了 <code>__main_block_impl_0</code> 的构造函数中保存在了结构体内。</p>\n<h5 id=\"amp-main-block-desc-0-DATA\"><a href=\"#amp-main-block-desc-0-DATA\" class=\"headerlink\" title=\"&amp;__main_block_desc_0_DATA\"></a>&amp;__main_block_desc_0_DATA</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> reserved;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> Block_size;</span><br><span class=\"line\">&#125; __main_block_desc_0_DATA = &#123; <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>__main_block_desc_0_DATA</code> 内部存储了两个参数，<code>reserved</code> 和 <code>Block_size</code>, <code>reserved</code> 直接赋值为0，<code>Block_size</code> 存储的是 <code>__main_block_impl_0</code> 所占用空间大小。最终将 <code>__main_block_desc_0</code> 结构体的地址传入 <code>__main_block_impl_0</code> 并赋值给 <code>Desc</code></p>\n<h5 id=\"age\"><a href=\"#age\" class=\"headerlink\" title=\"age\"></a>age</h5><p><code>age</code> 是我们定义的局部变量，因为在block内部使用到了局部变量，所以block声明的时候，这里会将 <code>age</code> 作为参数传入，也就是说block会捕获 <code>age</code>，如果没有在block中使用 <code>age</code> ，这里将只会传入 <code>(void *)__main_block_func_0</code> 和 <code>&amp;__main_block_desc_0_DATA</code> 这两个参数，如果有多个参数，那么传入的时候就会变成多个</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有捕获的情况</span></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class=\"line\"><span class=\"comment\">// 捕获多个变量</span></span><br><span class=\"line\"><span class=\"built_in\"><span class=\"keyword\">void</span></span>(*block)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = ((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))&amp;__main_block_impl_0((<span class=\"keyword\">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, age, name, numer));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再次查看-main-block-impl-0\"><a href=\"#再次查看-main-block-impl-0\" class=\"headerlink\" title=\"再次查看 __main_block_impl_0\"></a>再次查看 __main_block_impl_0</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, <span class=\"keyword\">int</span> _age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : <span class=\"built_in\">age</span>(_age) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;  <span class=\"comment\">// block内部代码块地址</span></span><br><span class=\"line\">    Desc = desc;        <span class=\"comment\">// block描述信息(占用内存大小)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>__main_block_impl_0</code> 的第一个变量就是 <code>__block_impl</code> 结构体，内部代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *isa;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Flags;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Reserved;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *FuncPtr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>__block_impl</code> 内部有一个 <code>isa</code> 指针。因此可以证明block本质上就是一个OC对象。而在构造函数中将函数传入的值分别存储在 <code>__main_block_impl_0</code> 结构体实例中，最终将结构体的地址赋值给block。</p>\n<p>通过上面对 <code>__main_block_impl_0</code> 结构体构造函数三个参数的问题，可以得出结论：<br>1.<code>__block_impl</code>结构体中 <code>isa</code> 指针存储着 <code>&amp;_NSConcreteStackBlock</code> 地址，可以暂时理解为其类对象地址，block就是 <code>_NSConcreteStackBlock</code> 类型的。<br>2.block代码块中的代码呗封装成 <code>__main_block_func_0</code> 函数，<code>FuncPtr</code> 存储着 <code>__main_block_func_0</code> 函数的地址。<br>3.<code>Desc</code> 指向 <code>__main_block_desc_0</code>结构体对象，其中存储 <code>__main_block_impl_0</code> 结构体所占用的内存大小。</p>\n<h4 id=\"调用block执行内部代码\"><a href=\"#调用block执行内部代码\" class=\"headerlink\" title=\"调用block执行内部代码\"></a>调用block执行内部代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行block代码</span></span><br><span class=\"line\">((<span class=\"built_in\"><span class=\"keyword\">void</span></span> (*)(__block_impl *, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>通过上述代码可以发现，block调用是通过 <code>block</code> 找到 <code>FuncPtr</code> 直接调用，通上面分析可以明确 block 执行的是 <code>__main_block_impl_0</code> 类型的结构体，但是在 <code>__main_block_impl_0</code> 内部并不能直接找到 <code>FuncPtr</code>，<code>FuncPtr</code> 是存在 <code>__block_impl</code> 中的。</p>\n<p><code>`1111</code></p>\n<p>比如<code>突出背景色</code>来显示强调效果</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Nov 23 2021 19:07:10 GMT+0800 (中国标准时间)","title":"Block本质","path":"2021/11/23/object-c_block_01/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-11-23T06:50:18.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-11-23T06:50:18.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"test_categories","tags":["test_tag"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"ckwbwhav10001m2859gfp9rdy","category_id":"ckwbwhav40003m2859gela1bx","_id":"ckwbwhav60006m2853h7873rw"}],"PostTag":[{"post_id":"ckwbwhav10001m2859gfp9rdy","tag_id":"ckwbwhav50004m285e1anestx","_id":"ckwbwhav50005m2852wfqd9f1"}],"Tag":[{"name":"test_tag","_id":"ckwbwhav50004m285e1anestx"}]}}